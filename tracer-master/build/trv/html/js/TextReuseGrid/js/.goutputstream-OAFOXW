var ReuseViz = new function(){

	this.colors = [ "DarkBlue", "Crimson", "DarkGreen", "OrangeRed", "Gold", "Sienna", "Maroon" ];
	this.sources = [ "ASV", "BasicEnglish", "Darby", "KJV", "Webster", "WEB", "YLT" ];
	this.algo = 'pair';

	var iid = 0;
	this.getIndependentIndex = function(){
		return ++iid;
	}

	var vid = 0;
	this.getVertexIndex = function(){
		return ++vid;
	}

	var history = [];

	var prefix = "/tpp/req?url=http://localhost:8983";

	this.initialize = function(){

		this.books = getJson(prefix+"/solr/select/?wt=json&indent=on&q=title:*&rows=100").response.docs;
		this.container = $('<div class="container"/>').appendTo($('#container')[0]);
		var editionSelect = $("<table class='biblePos'></table>").appendTo(this.container);

		this.reuse = $("<div style='text-align:center;overflow-y:auto;margin-top:20px;'></div>").appendTo(this.container);
		this.reuseViz = $("<div id='reuse' style='display:block;'></div>").appendTo(this.reuse);

		this.parallelView = $('<div class="parallelView"/>').appendTo(this.container);

		this.goBack = $("<div class='goBack'></div>").appendTo(this.reuse);
		$(this.goBack).click(function(){
			history.pop();
			if( history.length > 0 ){
				var h = history[history.length-1];
				ReuseViz.visualizeReuses(h.min1,h.max1,h.min2,h.max2);
			}
			else {
				ReuseViz.visualizeBooks();
				$(ReuseViz.goBack).css('display','none');
			}
		});

		var titles = $("<tr></tr>").appendTo(editionSelect);
		$("<td>Edition 1</td>").appendTo(titles);
		$("<td>Edition 2</td>").appendTo(titles);
		$("<td></td>").appendTo(titles);

		var dropdowns = $("<tr></tr>").appendTo(editionSelect);
		var cell1 = $('<td/>').appendTo(dropdowns);
		var cell2 = $('<td/>').appendTo(dropdowns);
		var cell3 = $('<td/>').appendTo(dropdowns);

		this.selectEdition1 = $('<select></select>').appendTo(cell1);
		$("<option>ASV</option>").appendTo(this.selectEdition1);
		$("<option>BasicEnglish</option>").appendTo(this.selectEdition1);
		$("<option>Darby</option>").appendTo(this.selectEdition1);
		$("<option>KJV</option>").appendTo(this.selectEdition1);
		$("<option>Webster</option>").appendTo(this.selectEdition1);
		$("<option>WEB</option>").appendTo(this.selectEdition1);
		$("<option>YLT</option>").appendTo(this.selectEdition1);

		this.selectEdition2 = $(this.selectEdition1).clone().appendTo(cell2);
		this.setEditions = $('<input type="button" value="Set Editions!">').appendTo(cell3);

		var showReuses = function(){
			$('option:selected',ReuseViz.selectEdition1).each(function(reuse,index){
				ReuseViz.edition1 = $(this).val();
			});
			$('option:selected',ReuseViz.selectEdition2).each(function(reuse,ind){
				ReuseViz.edition2 = $(this).val();
			});
			var index1 = -1, index2 = -1;
			for( var i=0; i<ReuseViz.sources.length; i++ ){
				if( ReuseViz.edition1 == ReuseViz.sources[i] ){
					index1 = i;
				}
				if( ReuseViz.edition2 == ReuseViz.sources[i] ){
					index2 = i;
				}
			}
			if( index1 > index2 ){
				var tmp = ReuseViz.edition2;
				ReuseViz.edition2 = ReuseViz.edition1;
				ReuseViz.edition1 = tmp;
			}
			ReuseViz.bookReuses = undefined;
			ReuseViz.visualizeBooks();
		}

		$(this.setEditions).click(function(){
			showReuses();
		});

		ReuseViz.edition1 = "ASV";
		ReuseViz.edition2 = "ASV";
		ReuseViz.book1 = "Isaiah";
		ReuseViz.book2 = "2 Kings";

	}

	var getJson = function(url) {
		var data;
		$.ajax({
			url : url,
			async : false,
			dataType : 'json',
			success : function(json) {
				data = json;
			}
		});
		return data;
	}

	this.visualizeBooks = function(){

		ReuseViz.chapterReuses = undefined;

		var setTooltip = function(node,book1,book2,reuses,rcc){
			node.ttip = 0;
			$(node).mouseenter(function(){
				if( node.ttip == 0 ){
					node.ttip = 1;
					$(node).qtip({
						content: {	
							text: "<span style='font-size: 12px'>"+ReuseViz.edition1+":<span style='font-weight: bold'>&nbsp;"+book1.title+"</span><br><span style='font-size: 12px'>"+ReuseViz.edition2+":<span style='font-weight: bold'>&nbsp;"+book2.title+"</span><br><span style='font-weight: bold'>Text Re-use(s): "+reuses+"</span><br><span style='font-weight: bold'>Significance: "+Math.round(100*rcc)+"%</span>"
						},
						style: {
							background: '#fff',
							color: '#000',
							border: { width: 2, radius: 2, color: '#777' }
						},
						position: {
							corner: {
								tooltip: "bottomLeft"
							}
						},
						show: {
							delay: 0
						}
					});
					$(node).trigger('mouseenter');
				}
			});
			$(node).click(function(){
				ReuseViz.book1 = book1;
				ReuseViz.book2 = book2;
				history.push({
					min1: book1.min,
					max1: book1.max,
					min2: book2.min,
					max2: book2.max
				});
				ReuseViz.visualizeReuses(book1.min,book1.max,book2.min,book2.max);
			});
		}

		var sal = this;
		$(this.reuseViz).empty();
		$(this.parallelView).empty();

		this.drawSpace(700,700,0,28632,0,28632,ReuseViz.edition1,ReuseViz.edition2);

		var filterDocs = function(docs){
			var filteredDocs = [];
			var ids1 = [];
			var ids2 = [];
			for( var i=0; i<docs.length; i++ ){
				if( typeof ids1[docs[i].unit1] == 'undefined' ){
					ids1[docs[i].unit1] = 0;
				}
				ids1[docs[i].unit1]++;
				if( typeof ids2[docs[i].unit2] == 'undefined' ){
					ids2[docs[i].unit2] = 0;
				}
				ids2[docs[i].unit2]++;
			}
			for( var i=0; i<docs.length; i++ ){
				if( ids1[docs[i].unit1] < 2 && ids2[docs[i].unit2] < 2 ){
					filteredDocs.push(docs[i]);
				}
			}
			return filteredDocs;
		}
		var correlationCoefficient = function(docs){
			if( docs.length == 0 ){
				return 0;
			}
			var x_m = 0, y_m = 0;
			for( var i=0; i<docs.length; i++ ){
				if( docs[i].source1 == ReuseViz.edition1 ){
					x_m += docs[i].unit1;
					y_m += docs[i].unit2;
				}
				else {
					y_m += docs[i].unit1;
					x_m += docs[i].unit2;
				}
			}
			x_m /= docs.length;
			y_m /= docs.length;
			var Xs = 0, Ys = 0, XY = 0;
			for( var i=0; i<docs.length; i++ ){
				if( docs[i].source1 == ReuseViz.edition1 ){
					Xs += ( docs[i].unit1 - x_m )*( docs[i].unit1 - x_m );
					Ys += ( docs[i].unit2 - y_m )*( docs[i].unit2 - y_m );
					XY += ( docs[i].unit1 - x_m )*( docs[i].unit2 - y_m );
				}
				else {
					Xs += ( docs[i].unit2 - x_m )*( docs[i].unit2 - x_m );
					Ys += ( docs[i].unit1 - y_m )*( docs[i].unit1 - y_m );
					XY += ( docs[i].unit2 - x_m )*( docs[i].unit1 - y_m );
				}
			}
			return Math.abs( XY / Math.sqrt( Xs * Ys ) );
		}
		var rankCorrelationCoefficient = function(docs){
			if( docs.length < 5 ){
				return 0;
			}
			var sortX = function(doc1,doc2){
				if( doc1.unit1 < doc2.unit1 ){
					return -1;
				}
				return 1;
			}
			var sortY = function(doc1,doc2){
				if( doc1.unit2 < doc2.unit2 ){
					return -1;
				}
				return 1;
			}
			var xSorted = docs.sort(sortX);
			var lastXUnit = -1, xStart = -1, xRank = 0;
			for( var i=0; i<xSorted.length; i++ ){
				if( lastXUnit != xSorted[i].unit1 ){
					if( lastXUnit != -1 ){
						var r = rank / (i-xStart);
						for( var j=xStart; j<i; j++ ){
							xSorted[j].xRank = r;
						}
					}
					lastXUnit = xSorted[i].unit1;
					xStart = i;
					rank = i+1;
				}
				else {
					rank += i+1;
				}
				if( i+1 == xSorted.length ){
					var r = rank / ((i+1)-xStart);
					for( var j=xStart; j<i+1; j++ ){
						xSorted[j].xRank = r;
					}
				}
			}
			var ySorted = docs.sort(sortY);
			var lastYUnit = -1, yStart = -1, yRank = 0;
			for( var i=0; i<ySorted.length; i++ ){
				if( lastYUnit != ySorted[i].unit2 ){
					if( lastYUnit != -1 ){
						var r = rank / (i-yStart);
						for( var j=yStart; j<i; j++ ){
							ySorted[j].yRank = r;
						}
					}
					lastYUnit = ySorted[i].unit2;
					yStart = i;
					rank = i+1;
				}
				else {
					rank += i+1;
				}
				if( i+1 == ySorted.length ){
					var r = rank / ((i+1)-yStart);
					for( var j=yStart; j<i+1; j++ ){
						ySorted[j].yRank = r;
					}
				}
			}
			var diff = 0;
			for( var i=0; i<docs.length; i++ ){
				diff += (docs[i].xRank-docs[i].yRank)*(docs[i].xRank-docs[i].yRank);
			}
//			console.info(Math.abs( 1 - 6*diff/(docs.length*(docs.length*docs.length-1)) ));
			return Math.abs( 1 - 6*diff/(docs.length*(docs.length*docs.length-1)) );
		}


		var x = 50, y = 650;
var runs = this.books.length;
		if( typeof this.bookReuses == 'undefined' ){
			this.bookReuses = [];
			this.allBR = [];
			for( var i=0; i<runs; i++ ){
				this.bookReuses.push([]);
				for( var j=0; j<runs; j++ ){
					this.bookReuses[i].push([]);
				}
			}
			for( var i=0; i<runs; i++ ){
				var min1 = this.books[i].min;
				var max1 = this.books[i].max;
				var book1 = this.books[i].title;
				for( var j=0; j<runs; j++ ){
					if( ReuseViz.edition1 == ReuseViz.edition2 && i > j ){
						continue;
					}
					var min2 = this.books[j].min;
					var max2 = this.books[j].max;
					var book2 = this.books[j].title;
//					var query = "(source1:"+ReuseViz.edition1+" AND unit1:["+min1+" TO "+max1+"] AND source2:"+ReuseViz.edition2+" AND unit2:["+min2+" TO "+max2+"]) OR (source1:"+ReuseViz.edition2+" AND unit1:["+min2+" TO "+max2+"] AND source2:"+ReuseViz.edition1+" AND unit2:["+min1+" TO "+max1+"])";
					var query = "(source1:"+ReuseViz.edition1+" AND book1:\""+book1+"\" AND source2:"+ReuseViz.edition2+" AND book2:\""+book2+"\")";
					var reusesIJ = getJson(prefix+"/solr/select/?wt=json&indent=on&q="+query+"&rows=10000").response;
					this.bookReuses[i][j] = false;
					if( reusesIJ.numFound > 0 ){
						this.bookReuses[i][j] = reusesIJ;
						this.bookReuses[i][j].rcc = rankCorrelationCoefficient(filterDocs(this.bookReuses[i][j].docs));
						this.allBR.push(this.bookReuses[i][j]);
						if( ReuseViz.edition1 == ReuseViz.edition2 && i !=j ){
							this.bookReuses[j][i] = reusesIJ;
							this.bookReuses[j][i].rcc = this.bookReuses[i][j].rcc;
							this.allBR.push(this.bookReuses[j][i]);
						}
					}
				}
			}
		}

		var rccClasses = [];
		var rccJenksCaspall = function(classes,data){
			var rccClassMedians = [];
			for( var i=0; i<classes; i++ ){
				rccClasses.push([]);
				rccClassMedians.push(0);
			}
			var sortByRCC = function(doc1,doc2){
				if( doc1.rcc < doc2.rcc ){
					return -1;
				}
				return 1;
			}
			data.sort(sortByRCC);
/*
			for( var i=0; i<data.length; i++ ){
				if( data[i].rcc == 0 ){
					rccClasses[0].push(data[i]);
				}
			}
			var j = 1;
			var fsi = (data.length-rccClasses[0].length)/(classes-1);
			var fs = Math.round(rccClasses[0].length+fsi);
			for( var i=rccClasses[0].length; i<data.length; i++ ){
				if( i==fs ){
					j++;
					fs = Math.round(rccClasses[0].length+j*fsi);
				}
				rccClasses[j].push(data[i]);
			}
*/
			var calcRccMedians = function(){
				for( var i=0; i<rccClasses.length; i++ ){
					rccClassMedians[i] = 0;
					for( var j=0; j<rccClasses[i].length; j++ ){
						rccClassMedians[i] += rccClasses[i][j].rcc;
					}
					rccClassMedians[i] /= rccClasses[i].length;
				}
			}
			var j = 0;
			var fsi = data.length/classes;
			var fs = Math.round(fsi);
			for( var i=0; i<data.length; i++ ){
				if( i==fs ){
					j++;
					fs = Math.round((j+1)*fsi);
				}
				rccClasses[j].push(data[i]);
			}
			var checkSplit = function(){
				do {
					calcRccMedians();
					var separated = true;
					for( var i=0; i<rccClassMedians.length-1; i++ ){
						if( rccClassMedians[i] == rccClassMedians[i+1] ){
							separated = false;
							rccClasses[i] = rccClasses[i].concat(rccClasses[i+1]);
							rccClasses = rccClasses.slice(0,i+1).concat(rccClasses.slice(i+2));
							break;
						}
					}
					if( !separated ){
						var diff = 0, cand = -1; 
						for( var i=0; i<rccClasses.length; i++ ){
							var diff_i = Math.abs(rccClasses[i][0].rcc - rccClasses[i][rccClasses[i].length-1].rcc);
							if( diff_i > diff ){
								diff = diff_i;
								cand = i;
							}
						}
						if( cand > -1 ){
							var rccClassesNew = rccClasses.slice(0,cand);
							var candidate = rccClasses[cand];
							rccClassesNew.push(candidate.slice(0,Math.floor(candidate.length/2)));
							rccClassesNew.push(candidate.slice(Math.floor(candidate.length/2)));
							rccClassesNew = rccClassesNew.concat(rccClasses.slice(cand+1));
							rccClasses = rccClassesNew;
						}
						else {
							classes--;
							rccClassMedians.pop();
							//console.log("Handle Classes Bug");
						}
					}
				}
				while(!separated);
			}
			do {
				checkSplit();
				calcRccMedians();
				var improvement = false;
				var from = 0, to = 0, shift = 0;
				for( var i=0; i<rccClasses.length; i++ ){
					if( i > 0 ){
						var innerDiff = rccClassMedians[i]-rccClasses[i][0].rcc;
						var outerDiff = rccClasses[i][0].rcc-rccClassMedians[i-1];
						if( innerDiff > outerDiff && innerDiff-outerDiff > shift ){
							shift = innerDiff-outerDiff;
							from = i;
							to = i-1;
						}
					}
					if( i < rccClasses.length-1 ){
						var innerDiff = rccClasses[i][rccClasses[i].length-1].rcc-rccClassMedians[i];
						var outerDiff = rccClassMedians[i+1]-rccClasses[i][rccClasses[i].length-1].rcc;
						if( innerDiff > outerDiff && innerDiff-outerDiff > shift ){
							shift = innerDiff-outerDiff;
							from = i;
							to = i+1;
						}
					}
				}
				if( shift > 0 ){
					improvement = true;
					if( from < to ){
						rccClasses[to] = [rccClasses[from][rccClasses[from].length-1]].concat(rccClasses[to]);
						rccClasses[from].pop();
					}
					else {
						rccClasses[to] = rccClasses[to].concat([rccClasses[from][0]]);
						rccClasses[from] = rccClasses[from].slice(1);
					}
				}
			}
			while(improvement);
			for( var i=0; i<rccClasses.length; i++ ){
				for( var j=0; j<rccClasses[i].length; j++ ){
					rccClasses[i][j].rccClass = i;
				}
			}
		}

		var reuseClasses = [];
		var reuseJenksCaspall = function(classes,data){
			var reuseClassMedians = [];
			for( var i=0; i<classes; i++ ){
				reuseClasses.push([]);
				reuseClassMedians.push(0);
			}
			var sortByCount = function(doc1,doc2){
				if( doc1.numFound < doc2.numFound ){
					return -1;
				}
				return 1;
			}
			data.sort(sortByCount);
			/*
			for( var i=0; i<data.length; i++ ){
				if( data[i].numFound == 1 ){
					reuseClasses[0].push(data[i]);
				}
				if( data[i].numFound == 2 ){
					reuseClasses[1].push(data[i]);
				}
			}
			var j = 2;
			var fsi = (data.length-reuseClasses[0].length-reuseClasses[1].length)/(classes-2);
			var fs = Math.round(reuseClasses[0].length+reuseClasses[1].length+fsi);
			for( var i=reuseClasses[0].length+reuseClasses[1].length; i<data.length; i++ ){
				if( i==fs ){
					j++;
					fs = Math.round(reuseClasses[0].length+reuseClasses[1].length+(j-1)*fsi);
				}
				reuseClasses[j].push(data[i]);
			}
			*/
			var calcCountMedians = function(){
				for( var i=0; i<reuseClasses.length; i++ ){
					reuseClassMedians[i] = 0;
					for( var j=0; j<reuseClasses[i].length; j++ ){
						reuseClassMedians[i] += reuseClasses[i][j].numFound;
					}
					reuseClassMedians[i] /= reuseClasses[i].length;
				}
			}
			var j = 0;
			var fsi = data.length/classes;
			var fs = Math.round(fsi);
			for( var i=0; i<data.length; i++ ){
				if( i==fs ){
					j++;
					fs = Math.round((j+1)*fsi);
				}
				reuseClasses[j].push(data[i]);
			}
			var checkSplit = function(){
				do {
					calcCountMedians();
					var separated = true;
					for( var i=0; i<reuseClassMedians.length-1; i++ ){
						if( reuseClassMedians[i] == reuseClassMedians[i+1] ){
							separated = false;
							reuseClasses[i] = reuseClasses[i].concat(reuseClasses[i+1]);
							reuseClasses = reuseClasses.slice(0,i+1).concat(reuseClasses.slice(i+2));
							break;
						}
					}
					if( !separated ){
						var diff = 0, cand = -1; 
						for( var i=0; i<reuseClasses.length; i++ ){
							var diff_i = Math.abs(reuseClasses[i][0].numFound - reuseClasses[i][reuseClasses[i].length-1].numFound);
							if( diff_i > diff ){
								diff = diff_i;
								cand = i